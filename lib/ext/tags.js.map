{"version":3,"sources":["../../src/ext/tags.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB;;AAEb;;;AAGA,eAAY,WALC;;AAOb;AACA,0BAAuB,QARV;;AAUb;AACA,0BAAuB,QAXV;;AAab;AACA,kCAA+B,UAdlB;;AAgBb;AACA,kCAA+B,UAjBlB;;AAmBb;;;;AAIA,WAAQ,OAvBK;;AAyBb;;;;AAIA,eAAY,WA7BC;;AA+Bb;;;;;;AAMA,uBAAoB,mBArCP;;AAuCb;;;;;AAKA;AACA;AACA,kBAAe,cA9CF;;AAgDb;AACA,mBAAgB,eAjDH;;AAmDb;AACA;AACA;AACA,kBAAe,cAtDF;;AAwDb;AACA;AACA,oBAAiB,WA1DJ;;AA4Db;AACA;AACA,oBAAiB,WA9DJ;;AAgEb;AACA,eAAY,WAjEC;;AAmEb;;;;AAIA;AACA;AACA,cAAW,UAzEE;;AA2Eb;AACA;AACA,iBAAc,aA7ED;;AA+Eb;AACA;AACA,sBAAmB,kBAjFN;;AAmFb;;;;AAIA;AACA;AACA;AACA,6BAA0B,yBA1Fb;;AA4Fb;;;;AAIA;AACA;AACA,iBAAc,aAlGD;;AAoGb;AACA;AACA;AACA,kBAAe,cAvGF;;AAyGb;AACA;AACA,aAAU,SA3GG;;AA6Gb;AACA;AACA,aAAU;AA/GG,CAAjB","file":"tags.js","sourcesContent":["module.exports = {\n\n    /** ------------------------------------------------------------------------\n    * SPAN_KIND hints at relationship between spans, e.g. client/server\n    * --------------------------------------------------------------------------*/\n    SPAN_KIND : 'span.kind',\n\n    // Marks a span representing the client-side of an RPC or other remote call\n    SPAN_KIND_RPC_CLIENT : 'client',\n\n    // Marks a span representing the server-side of an RPC or other remote call\n    SPAN_KIND_RPC_SERVER : 'server',\n\n    // Marks a span representing the producing-side within a messaging system or other remote call\n    SPAN_KIND_MESSAGING_PRODUCER : 'producer',\n\n    // Marks a span representing the consuming-side within a messaging system or other remote call\n    SPAN_KIND_MESSAGING_CONSUMER : 'consumer',\n\n    /** ------------------------------------------------------------------------\n    * ERROR (boolean) true if and only if the application considers the operation\n    * represented by the Span to have failed\n    * --------------------------------------------------------------------------*/\n    ERROR : 'error',\n\n    /** ------------------------------------------------------------------------\n    * COMPONENT (string) ia s low-cardinality identifier of the module, library,\n    * or package that is generating a span.\n    * --------------------------------------------------------------------------*/\n    COMPONENT : 'component',\n\n    /** ------------------------------------------------------------------------\n    * SAMPLING_PRIORITY (number) determines the priority of sampling this Span.\n    * If greater than 0, a hint to the Tracer to do its best to capture the trace.\n    * If 0, a hint to the trace to not-capture the trace. If absent, the Tracer\n    * should use its default sampling mechanism.\n    * --------------------------------------------------------------------------*/\n    SAMPLING_PRIORITY : 'sampling.priority',\n\n    /** ------------------------------------------------------------------------\n    * PEER_* tags can be emitted by either client-side of server-side to describe\n    * the other side/service in a peer-to-peer communications, like an RPC call.\n    * ---------------------------------------------------------------------------*/\n\n    // PEER_SERVICE (string) Remote service name (for some unspecified\n    // definition of \"service\"). E.g., \"elasticsearch\", \"a_custom_microservice\", \"memcache\"\n    PEER_SERVICE : 'peer.service',\n\n    // PEER_HOSTNAME (string) Remote hostname. E.g., \"opentracing.io\", \"internal.dns.name\"\n    PEER_HOSTNAME : 'peer.hostname',\n\n    // PEER_ADDRESS (string) Remote \"address\", suitable for use in a\n    // networking client library. This may be a \"ip:port\", a bare\n    // \"hostname\", a FQDN, or even a JDBC substring like \"mysql://prod-db:3306\"\n    PEER_ADDRESS : 'peer.address',\n\n    // PEER_HOST_IPV4 (number) Remote IPv4 address as a .-separated tuple.\n    // E.g., \"127.0.0.1\"\n    PEER_HOST_IPV4 : 'peer.ipv4',\n\n    // PEER_HOST_IPV6 (string) Remote IPv6 address as a string of\n    // colon-separated 4-char hex tuples. E.g., \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"\n    PEER_HOST_IPV6 : 'peer.ipv6',\n\n    // PEER_PORT (number) Remote port. E.g., 80\n    PEER_PORT : 'peer.port',\n\n    /** ------------------------------------------------------------------------\n    * HTTP tags\n    * ---------------------------------------------------------------------------*/\n\n    // HTTP_URL (string) URL of the request being handled in this segment of the\n    // trace, in standard URI format. E.g., \"https://domain.net/path/to?resource=here\"\n    HTTP_URL : 'http.url',\n\n    // HTTP_METHOD (string) HTTP method of the request for the associated Span. E.g.,\n    // \"GET\", \"POST\"\n    HTTP_METHOD : 'http.method',\n\n    // HTTP_STATUS_CODE (number) HTTP response status code for the associated Span.\n    // E.g., 200, 503, 404\n    HTTP_STATUS_CODE : 'http.status_code',\n\n    /** ------------------------------------------------------------------------\n    * Messaging tags\n    * ---------------------------------------------------------------------------*/\n\n    // MESSAGE_BUS_DESTINATION (string) An address at which messages can be exchanged.\n    // E.g. A Kafka record has an associated \"topic name\" that can be extracted\n    // by the instrumented producer or consumer and stored using this tag.\n    MESSAGE_BUS_DESTINATION : 'message_bus.destination',\n\n    /** ------------------------------------------------------------------------\n    * Database tags\n    * ---------------------------------------------------------------------------*/\n\n    // DB_INSTANCE (string) Database instance name. E.g., In java, if the\n    // jdbc.url=\"jdbc:mysql://127.0.0.1:3306/customers\", the instance name is \"customers\".\n    DB_INSTANCE : 'db.instance',\n\n    // DB_STATEMENT (string) A database statement for the given database type.\n    // E.g., for db.type=\"SQL\", \"SELECT * FROM wuser_table\";\n    // for db.type=\"redis\", \"SET mykey 'WuValue'\".\n    DB_STATEMENT : 'db.statement',\n\n    // DB_TYPE (string) Database type. For any SQL database, \"sql\". For others,\n    // the lower-case database category, e.g. \"cassandra\", \"hbase\", or \"redis\".\n    DB_TYPE : 'db.type',\n\n    // DB_USER (string) Username for accessing database. E.g., \"readonly_user\"\n    // or \"reporting_user\"\n    DB_USER : 'db.user',\n};\n"]}